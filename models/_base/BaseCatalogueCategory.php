<?php

/**
 * This is the model base class for the table "{{catalogue_category}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "CatalogueCategory".
 *
 * Columns in table "{{catalogue_category}}" available as properties of the model,
 * followed by relations of table "{{catalogue_category}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $parent_id
 * @property integer $sorting
 * @property string $title
 * @property string $path
 * @property integer $pic_holder_id
 * @property integer $list_holder_id
 *
 * @property ImagesHolder $listHolder
 * @property CatalogueCategory $parent
 * @property CatalogueCategory[] $catalogueCategories
 * @property ImagesHolder $picHolder
 * @property CatalogueCategoryInfo[] $catalogueCategoryInfos
 * @property mixed $tblCatalogueProducts
 * @property CatalogueProduct[] $catalogueProducts
 * @property mixed $tblCatalogueProperties
 */
abstract class BaseCatalogueCategory extends GxActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return '{{catalogue_category}}';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'CatalogueCategory|CatalogueCategories', $n);
    }

    public static function representingColumn() {
        return 'title';
    }

    public function rules() {
        return array(
            array('title', 'required'),
            array('parent_id, sorting', 'numerical', 'integerOnly'=>true),
            array('title, path', 'length', 'max'=>200),
            array('parent_id, sorting, path', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, parent_id, sorting, title, path', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'parent' => array(self::BELONGS_TO, 'CatalogueCategory', 'parent_id'),
            'catalogueCategories' => array(self::HAS_MANY, 'CatalogueCategory', 'parent_id'),
            'catalogueCategoryInfos' => array(self::HAS_MANY, 'CatalogueCategoryInfo', 'category_id'),
            'tblCatalogueProducts' => array(self::MANY_MANY, 'CatalogueProduct', '{{catalogue_category_to_product}}(category_id, product_id)'),
            'catalogueProducts' => array(self::HAS_MANY, 'CatalogueProduct', 'base_category_id'),
            'tblCatalogueProperties' => array(self::MANY_MANY, 'CatalogueProperty', '{{catalogue_property_to_category}}(category_id, property_id)'),
        );
    }

    public function pivotModels() {
        return array(
            'tblCatalogueProducts' => 'CatalogueCategoryToProduct',
            'tblCatalogueProperties' => 'CataloguePropertyToCategory',
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'parent_id' => null,
            'sorting' => Yii::t('app', 'Sorting'),
            'title' => Yii::t('app', 'Title'),
            'path' => Yii::t('app', 'Path'),
            'parent' => null,
            'catalogueCategories' => null,
            'catalogueCategoryInfos' => null,
            'tblCatalogueProducts' => null,
            'catalogueProducts' => null,
            'tblCatalogueProperties' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('parent_id', $this->parent_id);
        $criteria->compare('sorting', $this->sorting);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('path', $this->path, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
}