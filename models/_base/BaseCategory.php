<?php

/**
 * This is the model base class for the table "{{category}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Category".
 *
 * Columns in table "{{category}}" available as properties of the model,
 * followed by relations of table "{{category}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $parent_id
 * @property integer $sorting
 * @property string $title
 *
 * @property Category $parent
 * @property Category[] $categories
 * @property mixed $tblProducts
 */
abstract class BaseCategory extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{category}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Category|Categories', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title', 'required'),
			array('parent_id, sorting', 'numerical', 'integerOnly'=>true),
			array('title', 'length', 'max'=>200),
			array('parent_id, sorting', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, parent_id, sorting, title', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'parent' => array(self::BELONGS_TO, 'Category', 'parent_id'),
			'categories' => array(self::HAS_MANY, 'Category', 'parent_id'),
			'tblProducts' => array(self::MANY_MANY, 'Product', '{{category_to_product}}(category_id, product_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'tblProducts' => 'CategoryToProduct',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'parent_id' => null,
			'sorting' => Yii::t('app', 'Sorting'),
			'title' => Yii::t('app', 'Title'),
			'parent' => null,
			'categories' => null,
			'tblProducts' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('parent_id', $this->parent_id);
		$criteria->compare('sorting', $this->sorting);
		$criteria->compare('title', $this->title, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}