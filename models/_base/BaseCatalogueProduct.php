<?php

/**
 * This is the model base class for the table "{{catalogue_product}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "CatalogueProduct".
 *
 * Columns in table "{{catalogue_product}}" available as properties of the model,
 * followed by relations of table "{{catalogue_product}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $short_description
 * @property string $path
 * @property integer $base_category_id
 * @property integer $pic_holder_id
 * @property integer $list_holder_id
 *
 * @property mixed $tblCatalogueCategories
 * @property ImagesHolder $listHolder
 * @property CatalogueCategory $baseCategory
 * @property ImagesHolder $picHolder
 * @property CatalogueProductInfo[] $catalogueProductInfos
 * @property CataloguePropertiesValue[] $cataloguePropertiesValues
 */
abstract class BaseCatalogueProduct extends GxActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return '{{catalogue_product}}';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'CatalogueProduct|CatalogueProducts', $n);
    }

    public static function representingColumn() {
        return 'title';
    }

    public function rules() {
        return array(
            array('title', 'required'),
            array('base_category_id', 'numerical', 'integerOnly'=>true),
            array('title, path', 'length', 'max'=>200),
            array('path, base_category_id', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, title, short_description, path, base_category_id, article', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'tblCatalogueCategories' => array(self::MANY_MANY, 'CatalogueCategory', '{{catalogue_category_to_product}}(product_id, category_id)'),
            'baseCategory' => array(self::BELONGS_TO, 'CatalogueCategory', 'base_category_id'),
            'catalogueProductInfos' => array(self::HAS_MANY, 'CatalogueProductInfo', 'product_id'),
            'cataloguePropertiesValues' => array(self::HAS_MANY, 'CataloguePropertiesValue', 'product_id'),
        );
    }

    public function pivotModels() {
        return array(
            'tblCatalogueCategories' => 'CatalogueCategoryToProduct',
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'title' => Yii::t('app', 'Title'),
            'short_description' => Yii::t('app', 'Short Description'),
            'path' => Yii::t('app', 'Path'),
            'article' => Yii::t('app', 'Article'),
            'base_category_id' => Yii::t('app', 'CatalogueCategory'),
            'tblCatalogueCategories' => null,
            'baseCategory' => null,
            'catalogueProductInfos' => null,
            'cataloguePropertiesValues' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('short_description', $this->short_description, true);
        $criteria->compare('path', $this->path, true);
        $criteria->compare('base_category_id', $this->base_category_id);
        $criteria->compare('article', $this->article, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
}